namespace CodeModelTestInput
{
    public class Class1
    {
        public void Method1()
        {
            byte[] Bytes = new byte[3] {1, 2, 255};
            ushort[] UShorts = new ushort[3] {1, 255, 65535};
            uint[] UInts = new uint[3] {255, 65535, uint.MaxValue};
            ulong[] ULongs = new ulong[4] {255, 65535, 4294967295, ulong.MaxValue};
            sbyte[] SBytes = new sbyte[5] {-128, 1, 2, 3, 127};
            short[] Shorts = new short[3] {-128, -32768, 32767};
            int[] Ints = new int[3] {-128, -32768, int.MinValue};
            long[] Longs = new long[4] {-128, -32768, -2147483648, long.MinValue};
            char[] Chars = new char[3] {'a', 'b', 'c'};
        }

        public void Method2()
        {
            byte[] Bytes = new byte[1] {255};
            ushort[] UShorts = new ushort[1] {65535};
            uint[] UInts = new uint[1] {(uint)-1};
            ulong[] ULongs = new ulong[1] {(ulong)(long)-1};
            sbyte[] SBytes = new sbyte[1] {-128};
            short[] Shorts = new short[1] {-32768};
            int[] Ints = new int[1] {int.MinValue};
            long[] Longs = new long[1] {long.MinValue};
            char[] Chars = new char[1] {'a'};
            bool[] Bools = new bool[1] {true};
            decimal[] Decimals = new decimal[1] {new decimal(11, 0, 0, false, 1)};
        }

        private void Method3()
        {
            int j;
            int k;
            int i = 1;
            if (i == 1)
            {
                j = 2;
            }
            else
            {
                j = 3;
            }
            k = i + j;
        }

        private bool Method4(int[] xs, int x)
        {
            return System.Diagnostics.Contracts.Contract.ForAll<int>(xs, (int i) => i < x);

        }

        private void Method5(int[] xs, int x)
        {
            if (x < xs.Length)
            {
                xs[x] = 3;
            }
        }

        private void Method6(int[] xs, int x)
        {
            if (x < xs.Length)
            {
                xs[x] = 3;
            }
            if (0 < xs.Length)
            {
                xs[0] = x;
            }
        }

        private void Method7(int[] xs, int x)
        {
            if (x < xs.Length)
            {
                xs[x] = 3;
            }
            if (0 < xs.Length)
            {
                xs[0] = x;
                return;

            }
            xs = new int[3];
        }

        private void Method8(int[] xs, int x)
        {
            if (0 < xs.Length)
            {
                xs[0] = x;
            }
            else
            {
                xs = new int[3];
            }
            if (x < xs.Length)
            {
                xs[x] = 3;
            }
        }

        private void Method9(int[] xs, int x)
        {
            if (0 < xs.Length && x < xs.Length)
            {
                xs[x] = 3;
            }
        }

        private static void Method10(int x)
        {
            int[] a = new int[x > 0 ? x : 5];
        }

        private static void Method11(int x)
        {
            int[][] a = (int[][])null;
            a[0] = new int[x > 0 ? x : 5];
        }

        private static bool Method12(int x)
        {
            switch(x - 1){
                case 0:
                    goto IL_001d;
                case 1:
                case 2:
                case 3:
                    goto IL_0021;
            }
            goto IL_0025;
        IL_001d:
            return false;

        IL_0021:
            return true;

        IL_0025:
            return false;

        }

        private string Method13()
        {
            try
            {
                int x;
                switch(this.c){
                    case 0:
                        goto IL_0019;
                    case 1:
                        goto IL_0021;
                }
                goto IL_0034;
            IL_0019:
                return "1";

            IL_0021:
                try
                {
                    return "2";

                }
                catch
                {
                    return "3";

                }
            IL_0034:
                x = 0;
                try
                {
                    switch(x + this.c){
                        case 0:
                            goto IL_0050;
                        case 1:
                            goto IL_0058;
                    }
                    goto IL_0060;
                IL_0050:
                    return "4";

                IL_0058:
                    return "5";

                IL_0060:
                    return "6";

                }
                catch
                {
                    return "7";

                }
            }
            catch
            {
                return "8";

            }
        }

        private void Method14()
        {
            try
            {
            }
            catch(System.ApplicationException e)
            {
                try
                {
                    int x = 4;
                    System.Console.WriteLine(x);
                    System.Console.WriteLine(e);
                    System.Console.WriteLine(e);
                }
                catch(System.Exception e1)
                {
                    System.Console.WriteLine(e1);
                }
            }
            catch(System.Exception ex)
            {
                System.Console.WriteLine(ex);
            }
        }

        private System.Type Method15()
        {
            return typeof(CodeModelTestInput.Class1);

        }

        private int[] Method16(int[] xs)
        {
            ++xs[0];
            return xs;

        }

        private bool Method17(bool A, bool B, bool C, bool D)
        {
            return A && B || C && D;

        }

        private int Method18(int x, int y, int z)
        {
            int midVal = z;
            if (y < z)
            {
                if (x < y)
                {
                    midVal = y;
                }
                else
                {
                    if (x < z)
                    {
                        midVal = x;
                    }
                }
            }
            return midVal;

        }

        public System.Collections.Generic.IEnumerable<int> Method19(int x)
        {
            return new CodeModelTestInput.Class1.<Method19>d__3(-2){
                <>4__this = this, 
                <>3__x = x, 
            };

        }

        public System.Collections.Generic.IEnumerable<int> Method20(int x)
        {
            return new CodeModelTestInput.Class1.<Method20>d__7(-2){
                <>4__this = this, 
                <>3__x = x, 
            };

        }

        public void Method21()
        {
            {
                int i;
                for (i = 0; i < 1; ++i)
                {
                    System.Action t = () => i.Equals(i);
                }
            }
        }

        public System.Collections.Generic.IEnumerable<int> Method22()
        {
            return new CodeModelTestInput.Class1.<Method22>d__e(-2){
                <>4__this = this, 
            };

        }

        private static void Method23(out string x, out string y)
        {
            x = y = (string)null;
        }

        private void Method24()
        {
            string a = "abc";
            string b = a.Substring(1);
        }

        public int Method25(object o)
        {
            int x = 3;
            if (o is CodeModelTestInput.Class3 || o is CodeModelTestInput.Class1)
            {
                x = 27;
            }
            return x;

        }

        public void Method26(out bool y)
        {
            y = false;
        }

        private static int Method27(int n)
        {
            int i = 1;
            if (++i > n)
            {
                return i;

            }
            return 0;

        }

        public int Method28(int n)
        {
            if (++this.c > n)
            {
                return this.c;

            }
            return 0;

        }

        public int Method29(int y)
        {
            return y + this.c++;

        }

        private int Method30(int[] xs)
        {
            return xs[0]++;

        }

        private int Method31(int[] xs)
        {
            return xs[0] += 3;

        }

        private void Method32()
        {
            CodeModelTestInput.SomeStruct sstr = default(CodeModelTestInput.SomeStruct);
            sstr.Width >>= 1;
        }

        private static void Method33()
        {
            short[] a = new short[1];
            short[] b = new short[1];
            a[0] += b[0];
        }

        private void Method33(System.Collections.ICollection c)
        {
            System.Console.WriteLine(c != default(System.Collections.ICollection) ? c.Count : 32);
        }

        private void Method34()
        {
            System.DateTime dt = new System.DateTime((long)100);
        }

        private System.Action Method35()
        {
            object foo;
            try
            {
                foo = "fi";
            }
            catch
            {
                return (System.Action)null;

            }
            return () => System.Console.WriteLine(foo);

        }

        public void Method36()
        {
            object[] a = (object[])null;
            int i = 1;
            a[i - 1] = a[i] = "foo";
        }

        private static void Method37(out System.Action foo)
        {
            foo = delegate () {
                string bar = "one";
                System.Console.WriteLine(bar);
            };
        }

        private static void Method38(out System.Action foo)
        {
            string bar;
            foo = () => bar = "one";
            foo = delegate () {
                bar = "two";
                System.Console.WriteLine(bar);
            };
        }

        private void Method39(System.Action foo)
        {
            foo = delegate () {
                int bar;
                this.Method40(out bar);
                System.Console.WriteLine(bar);
            };
        }

        private void Method40(out int bar)
        {
            bar = 1;
        }

        private void Method41(CodeModelTestInput.Class1 c, System.Action foo)
        {
            string stack_0_System_String;
            string someString;
            if (c == default(CodeModelTestInput.Class1))
            {
                stack_0_System_String = "";
            }
            else
            {
                stack_0_System_String = c.Method42((object part) => part);
            }
            someString = stack_0_System_String;
            foo = () => someString = (string)null;
        }

        private string Method42(System.Func<object, object> something)
        {
            return "something";

        }

        private int Method43()
        {
            int foo = 0;
            System.Action one = delegate () {
                System.Action two = delegate () {
                    int bar = 0;
                    if (foo != 0)
                    {
                        foo = bar;
                    }
                };
            };
            return foo;

        }

        private void Method44(char ch)
        {
            if (ch == '+')
            {
                System.Console.WriteLine("foo");
            }
        }

        private void Method45(char ch)
        {
            if (char.IsNumber(ch) || ch == '.' || ch == '-' || ch == '+')
            {
                System.Console.WriteLine("foo");
            }
        }

        private void Method46(CodeModelTestInput.Class1 o)
        {
            o.c += 0;
            o.c += 0;
            o.c += 0;
            o.c /= 1;
            o.boolField |= false;
            o.boolField |= false;
            o.charField += (char)0;
            o.charField += (char)0;
            o.charField += (char)0;
            o.charField /= '\u0001';
            o.stringField += "";
        }

        public int Method47(object o)
        {
            int x = 3;
            if (!(o is CodeModelTestInput.Class3))
            {
                x = 27;
            }
            return x;

        }

        public void Method48(int x)
        {
            StaticIntProperty += x;
            StaticIntProperty -= x;
            StaticIntProperty *= x;
            StaticIntProperty /= x;
        }

        public void Method49(bool b)
        {
            try
            {
                if (b)
                {
                    return;

                }
                System.Console.WriteLine("bar");
            }
            finally
            {
                System.Console.WriteLine("finally");
            }
        }

        public void Method50(int x)
        {
            int CS$4$0000 = x;
            switch(CS$4$0000 - 62){
                case 0:
                    goto IL_0038;
                case 1:
                    goto IL_005f;
                case 2:
                    goto IL_002b;
            }
            switch(CS$4$0000 - 85){
                case 0:
                    goto IL_0045;
                case 1:
                    goto IL_0052;
            }
            goto IL_005f;
        IL_002b:
            System.Console.WriteLine("64");
            return;

        IL_0038:
            System.Console.WriteLine("62");
            return;

        IL_0045:
            System.Console.WriteLine("85");
            return;

        IL_0052:
            System.Console.WriteLine("86");
            return;

        IL_005f:
            System.Console.WriteLine("in between");
            if (x != 71)
            {
                return;

            }
            System.Console.WriteLine("71");
            return;

        }

        public CodeModelTestInput.SomeEnum SomeEnumValue()
        {
            return 0;

        }

        public CodeModelTestInput.SomeEnum Method51(CodeModelTestInput.Class1 c)
        {
            CodeModelTestInput.SomeEnum t;
            t = c != default(CodeModelTestInput.Class1) ? c.SomeEnumValue() : 0;
            return t;

        }

        public Class1()
        {
            this.c = 0;
            this.object();
        }

        private static int StaticIntProperty
        {
            get
            {
                return 3;

            }
            set
            {
            }
        }

        private int c;

        private bool boolField;

        private char charField;

        private string stringField;
    }

    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
    struct SomeStruct
    {
        public int Width
        {
            get
            {
                return this.width;

            }
            set
            {
                this.width = value;
            }
        }

        private int width;
    }

    public enum SomeEnum
    {
        e1 = 0,
        e2 = 1,
    }

    public class Class2
    {
        public Class2()
        {
            this.object();
        }

        public interface IIncrementable<T>
        {
            T IncrementBy(int i);

            int Value();
        }

        public class A : CodeModelTestInput.Class2.IIncrementable<CodeModelTestInput.Class2.A>
        {
            public A(string s)
            {
                this.object();
                this.s = s;
            }

            public int Value()
            {
                return this.s.Length;

            }

            public CodeModelTestInput.Class2.A IncrementBy(int i)
            {
                return this;

            }

            private string s;
        }

        public class Test2
        {
            public System.Collections.Generic.IEnumerable<string> Test1a(string s)
            {
                return new CodeModelTestInput.Class2.Test2.<Test1a>d__0(-2){
                    <>4__this = this, 
                    <>3__s = s, 
                };

            }

            public System.Collections.Generic.IEnumerable<T> Test1c<T>(T t, System.Collections.Generic.IEnumerable<T> ts)
            {
                return new CodeModelTestInput.Class2.Test2.<Test1c>d__3<T>(-2){
                    <>4__this = this, 
                    <>3__t = t, 
                    <>3__ts = ts, 
                };

            }

            public System.Collections.Generic.IEnumerable<T> Test1d<T>(System.Collections.Generic.IEnumerable<T> input)
            {
                return new CodeModelTestInput.Class2.Test2.<Test1d>d__6<T>(-2){
                    <>4__this = this, 
                    <>3__input = input, 
                };

            }

            public System.Collections.Generic.IEnumerable<T> Test1e<T>(System.Collections.Generic.IEnumerable<T> input)
            {
                return new CodeModelTestInput.Class2.Test2.<Test1e>d__c<T>(-2){
                    <>4__this = this, 
                    <>3__input = input, 
                };

            }

            public System.Collections.Generic.IEnumerable<int> Test1f(System.Collections.Generic.IEnumerable<int> inputArray, int max)
            {
                return new CodeModelTestInput.Class2.Test2.<Test1f>d__12(-2){
                    <>4__this = this, 
                    <>3__inputArray = inputArray, 
                    <>3__max = max, 
                };

            }

            public System.Collections.Generic.IEnumerable<T> Test1g<T>(System.Collections.Generic.IEnumerable<T> ts, T x)
            {
                return new CodeModelTestInput.Class2.Test2.<Test1g>d__18<T>(-2){
                    <>4__this = this, 
                    <>3__ts = ts, 
                    <>3__x = x, 
                };

            }

            private bool foo(object y, object x)
            {
                return y == x;

            }

            public System.Collections.Generic.IEnumerable<T> Test1h<T>(System.Collections.Generic.IEnumerable<T> input, int x, int y)
                where T: CodeModelTestInput.Class2.IIncrementable<T>
            {
                return new CodeModelTestInput.Class2.Test2.<Test1h>d__1b<T>(-2){
                    <>4__this = this, 
                    <>3__input = input, 
                    <>3__x = x, 
                    <>3__y = y, 
                };

            }

            public Test2()
            {
                this.object();
            }
        }

        public class Test3<T>
        {
            public Test3(T t)
            {
                this.object();
                this.tfield = t;
            }

            public System.Collections.Generic.IEnumerable<T> Test1a(T t)
            {
                return new CodeModelTestInput.Class2.Test3<T>.<Test1a>d__21(-2){
                    <>4__this = this, 
                    <>3__t = t, 
                };

            }

            public System.Collections.Generic.IEnumerable<T> Test1b(T s)
            {
                return new CodeModelTestInput.Class2.Test3<T>.<Test1b>d__24(-2){
                    <>4__this = this, 
                    <>3__s = s, 
                };

            }

            public System.Collections.Generic.IEnumerable<T> Test1d(System.Collections.Generic.IEnumerable<T> input)
            {
                return new CodeModelTestInput.Class2.Test3<T>.<Test1d>d__27(-2){
                    <>4__this = this, 
                    <>3__input = input, 
                };

            }

            public System.Collections.Generic.IEnumerable<T1> Test1e<T1>(System.Collections.Generic.IEnumerable<T> input, T1 t)
                where T1: CodeModelTestInput.Class2.IIncrementable<T1>
            {
                return new CodeModelTestInput.Class2.Test3<T>.<Test1e>d__2d<T1>(-2){
                    <>4__this = this, 
                    <>3__input = input, 
                    <>3__t = t, 
                };

            }

            public System.Collections.Generic.IEnumerable<T1> Test1g<T1>(System.Collections.Generic.IEnumerable<T1> ts, T x)
                where T1: CodeModelTestInput.Class2.IIncrementable<T1>
            {
                return new CodeModelTestInput.Class2.Test3<T>.<Test1g>d__30<T1>(-2){
                    <>4__this = this, 
                    <>3__ts = ts, 
                    <>3__x = x, 
                };

            }

            private bool foo<S>(CodeModelTestInput.Class2.IIncrementable<S> y, T x)
            {
                return y.Value() == x.Value();

            }

            private T Test1h(out System.Action foo)
            {
                T ret = default(T);
                foo = () => ret = default(T);
                return ret;

            }

            public T TField
            {
                get
                {
                    return this.tfield;

                }
            }

            private T tfield;
        }
    }

    public class GenericParamMustBeStruct<T>
    {
        public string M()
        {
            return default(T).ToString();

        }

        public GenericParamMustBeStruct()
        {
            this.object();
        }
    }

    public class Class3
    {
        public Class3(System.Collections.Generic.List<int> xs)
        {
            this.fieldJustForCtorTest = false;
            this.list = new System.Collections.Generic.List<int>();
            this.object();
            this.fieldJustForCtorTest = xs.TrueForAll((int i) => i > 0);
        }

        public static bool Method3_1<T>(T p1)
            where T: class
        {
            System.Collections.Generic.List<T> list = new System.Collections.Generic.List<T>();
            T tmp = p1;
            return list.TrueForAll((T t) => t.Equals((object)tmp));

        }

        public static bool Method3_2<T>(T p1)
        {
            System.Collections.Generic.List<T> list = new System.Collections.Generic.List<T>();
            return list.TrueForAll((T t) => t.Equals((object)p1));

        }

        public static bool Method3_3<T1>(T1 p1)
            where T1: class
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (object)t == null);

        }

        public static bool Method3_4<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => t.GetHashCode() == p1.GetHashCode() + j);

        }

        public bool Method3_5<T1>(T1 p1)
            where T1: class
        {
            T1 tmp = p1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => t.Equals((object)tmp));

        }

        public bool Method3_6<T1>(T1 p1)
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => t.GetHashCode() == p1.GetHashCode());

        }

        public bool Method3_7<T1>(T1 p1)
            where T1: class
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (object)t == null);

        }

        public bool Method3_8<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => t.GetHashCode() == p1.GetHashCode() + j);

        }

        public bool Method3_9<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                {
                    System.Collections.Generic.List<T1> newList = list;
                    int k = 12;
                    return newList.TrueForAll((T1 t1) => t.GetHashCode() == t1.GetHashCode() + p1.GetHashCode() + j + k);

                }
            });

        }

        public bool Method3_10<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                {
                    System.Collections.Generic.List<T1> newList = list;
                    int k = 12;
                    bool b1 = newList.TrueForAll((T1 t1) => t.GetHashCode() == t1.GetHashCode() + p1.GetHashCode() + j + k);
                    bool b2 = list.TrueForAll((T1 t1) => t1.GetHashCode() == t.GetHashCode() + j + k);
                    return b1 && b2;

                }
            });

        }

        public bool Method3_17(int p1)
        {
            int local = 3;
            return this.list.TrueForAll((int t) => t.GetHashCode() == local);

        }

        public bool Method3_18(int p1)
        {
            return this.list.TrueForAll((int t) => t.GetHashCode() == p1);

        }

        public bool Method3_19(int p1)
        {
            return this.list.TrueForAll((int t) => t == 10);

        }

        public bool Method3_20(int p1)
        {
            int j = 1;
            return this.list.TrueForAll((int t) => t == p1 + j);

        }

        public bool Method3_21(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                {
                    System.Collections.Generic.List<int> newList = this.list;
                    int k = 12;
                    return newList.TrueForAll((int t1) => t == t1 + p1 + j + k);

                }
            });

        }

        public bool Method3_22(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                {
                    System.Collections.Generic.List<int> newList = this.list;
                    int k = 12;
                    bool b1 = newList.TrueForAll((int t1) => t.GetHashCode() == t1 + p1 + j + k);
                    bool b2 = this.list.TrueForAll((int t1) => t1.GetHashCode() == t.GetHashCode() + j + k);
                    return b1 && b2;

                }
            });

        }

        public bool Method3_25(int i)
        {
            return this.list.TrueForAll(delegate (int t) {
                {
                    System.Collections.Generic.List<int> newList = this.list;
                    return true;

                }
            });

        }

        private bool fieldJustForCtorTest;

        private System.Collections.Generic.List<int> list;

        private class Class3Inner1<T2>
        {
            public Class3Inner1(System.Collections.Generic.List<T2> xs)
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.fieldJustForCtorTest = false;
                this.object();
                this.fieldJustForCtorTest = xs.TrueForAll((T2 i) => !((object)i == null));
            }

            public bool Method3_11(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    {
                        System.Collections.Generic.List<T2> newList = this.list_inner;
                        int k = 12;
                        return newList.TrueForAll((T2 t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);

                    }
                });

            }

            public bool Method3_12(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    {
                        System.Collections.Generic.List<T2> newList = this.list_inner;
                        int k = 12;
                        bool b1 = newList.TrueForAll((T2 t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);
                        bool b2 = this.list_inner.TrueForAll((T2 t1) => t1.GetHashCode() == t.GetHashCode() + i + j + k);
                        return b1 && b2;

                    }
                });

            }

            private System.Collections.Generic.List<T2> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class3Inner1
        {
            public Class3Inner1(System.Collections.Generic.List<int> xs)
            {
                this.list_inner = new System.Collections.Generic.List<int>();
                this.fieldJustForCtorTest = false;
                this.object();
                this.fieldJustForCtorTest = xs.TrueForAll((int i) => i > 0);
            }

            public bool Method3_13(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (int t) {
                    {
                        System.Collections.Generic.List<int> newList = this.list_inner;
                        int k = 12;
                        return newList.TrueForAll((int t1) => t == t1 + i + j + k);

                    }
                });

            }

            public bool Method3_14(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (int t) {
                    {
                        System.Collections.Generic.List<int> newList = this.list_inner;
                        int k = 12;
                        bool b1 = newList.TrueForAll((int t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);
                        bool b2 = this.list_inner.TrueForAll((int t1) => t1.GetHashCode() == t.GetHashCode() + i + j + k);
                        return b1 && b2;

                    }
                });

            }

            private System.Collections.Generic.List<int> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class3Inner2<T2>
        {
            public bool Method3_23(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    {
                        System.Collections.Generic.List<T2> newList = this.list_inner;
                        int k = 12;
                        return newList.TrueForAll((T2 t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);

                    }
                });

            }

            public bool Method3_24(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    {
                        System.Collections.Generic.List<T2> newList = this.list_inner;
                        int k = 12;
                        bool b1 = newList.TrueForAll((T2 t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);
                        bool b2 = this.list_inner.TrueForAll((T2 t1) => t1.GetHashCode() == t.GetHashCode() + i + j + k);
                        return b1 && b2;

                    }
                });

            }

            public Class3Inner2()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
            }

            private System.Collections.Generic.List<T2> list_inner;
        }
    }

    public class Class4<T>
    {
        public Class4(System.Collections.Generic.List<T> xs)
        {
            this.fieldJustForCtorTest = false;
            this.object();
            this.fieldJustForCtorTest = xs.TrueForAll((T i) => !((object)i == null));
        }

        public static bool Method4_1<T1>(T1 p1)
            where T1: class
        {
            T1 tmp = p1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == tmp.GetHashCode());

        }

        public static bool Method4_2<T1>(T1 p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1.GetHashCode());

        }

        public static bool Method4_3<T1>(T1 p1)
            where T1: class
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (object)t == null);

        }

        public static bool Method4_4<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1.GetHashCode() + j);

        }

        public bool Method4_5<T1>(T1 p1)
            where T1: class
        {
            T1 tmp = p1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == tmp.GetHashCode());

        }

        public bool Method4_6<T1>(T1 p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1.GetHashCode());

        }

        public bool Method4_7<T1>(T1 p1)
            where T1: class
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (object)t == null);

        }

        public bool Method4_8<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1.GetHashCode() + j);

        }

        public bool Method4_9<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    return newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + p1.GetHashCode() + j + k);

                }
            });

        }

        public bool Method4_10<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    bool b1 = newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + p1.GetHashCode() + j + k);
                    bool b2 = CodeModelTestInput.Class4<T>.list.TrueForAll((T t1) => t1.GetHashCode() == t.GetHashCode() + j + k);
                    return b1 && b2;

                }
            });

        }

        public static bool Method4_13()
        {
            int local = 3;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == local);

        }

        public static bool Method4_14(int p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1);

        }

        public static bool Method4_15(int p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (object)t == null);

        }

        public static bool Method4_16(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1 + j);

        }

        public bool Method4_17(int p1)
        {
            int local = 3;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == local);

        }

        public bool Method4_18(int p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1);

        }

        public bool Method4_19(int p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (object)t == null);

        }

        public bool Method4_20(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => t.GetHashCode() == p1 + j);

        }

        public bool Method4_21(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    return newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + p1 + j + k);

                }
            });

        }

        public bool Method4_22(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    bool b1 = newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + p1.GetHashCode() + j + k);
                    bool b2 = CodeModelTestInput.Class4<T>.list.TrueForAll((T t1) => t1.GetHashCode() == t.GetHashCode() + j + k);
                    return b1 && b2;

                }
            });

        }

        private static System.Collections.Generic.List<T> list;

        private bool fieldJustForCtorTest;

        private class Class4Inner1<T2>
        {
            public Class4Inner1(System.Collections.Generic.List<T> xs, System.Collections.Generic.List<T2> ys)
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.fieldJustForCtorTest = false;
                this.object();
                this.fieldJustForCtorTest = (xs.TrueForAll((T i) => !((object)i == null)) && ys.TrueForAll((T2 i) => !((object)i == null))) != 0;
            }

            public bool Method4_11(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    {
                        System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                        int k = 12;
                        return newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);

                    }
                });

            }

            public bool Method4_12(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    {
                        System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                        int k = 12;
                        bool b1 = newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);
                        bool b2 = this.list_inner.TrueForAll((T2 t1) => t1.GetHashCode() == t.GetHashCode() + i + j + k);
                        return b1 && b2;

                    }
                });

            }

            private System.Collections.Generic.List<T2> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class4Inner2
        {
            public Class4Inner2(System.Collections.Generic.List<T> xs)
            {
                this.list_inner = new System.Collections.Generic.List<T>();
                this.fieldJustForCtorTest = false;
                this.object();
                this.fieldJustForCtorTest = xs.TrueForAll((T i) => !((object)i == null));
            }

            public bool Method4_11(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    {
                        System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                        int k = 12;
                        return newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);

                    }
                });

            }

            public bool Method4_12(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    {
                        System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                        int k = 12;
                        bool b1 = newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);
                        bool b2 = this.list_inner.TrueForAll((T t1) => t1.GetHashCode() == t.GetHashCode() + i + j + k);
                        return b1 && b2;

                    }
                });

            }

            private System.Collections.Generic.List<T> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class4Inner3<T2>
        {
            public bool Method4_23(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    {
                        System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                        int k = 12;
                        return newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);

                    }
                });

            }

            public bool Method4_24(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    {
                        System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                        int k = 12;
                        bool b1 = newList.TrueForAll((T t1) => t.GetHashCode() == t1.GetHashCode() + i + j + k);
                        bool b2 = this.list_inner.TrueForAll((T2 t1) => t1.GetHashCode() == t.GetHashCode() + i + j + k);
                        return b1 && b2;

                    }
                });

            }

            public Class4Inner3()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
            }

            private System.Collections.Generic.List<T2> list_inner;
        }
    }

    public class ClassWithCtorThatGeneratesTwoClosureClasses
    {
        public ClassWithCtorThatGeneratesTwoClosureClasses(object encoder, string[] data)
        {
            this.name = "";
            this.object();
            {
                System.Collections.Generic.List<int> xs = new System.Collections.Generic.List<int>();
                xs.TrueForAll((int i) => data[i] == this.name);
                string nullEncoder = encoder as string;
                this.name = nullEncoder;
                this.ValueToString = (object obj) => obj != default(object) ? encoder.ToString() : nullEncoder;
            }
        }

        internal readonly System.Func<object, string> ValueToString;

        internal string name;
    }

    public class ClassThatCausesTempHoldingClosureClassToBeGenerated
    {
        public ClassThatCausesTempHoldingClosureClassToBeGenerated(bool b)
        {
            this.object();
            {
                System.Action act1 = () => System.Console.WriteLine(this.x);
                System.Action act2 = delegate () {
                    if (b)
                    {
                        act1();
                    }
                };
            }
        }

        private int x;
    }

    public class UnusedCapturedLocal
    {
        public static System.IAsyncResult foo(object o, System.AsyncCallback callback, object state)
        {
            return (System.IAsyncResult)null;

        }

        public System.IAsyncResult BeginTask(System.Func<System.AsyncCallback, object, System.IAsyncResult> task)
        {
            return (System.IAsyncResult)null;

        }

        public System.Collections.Generic.IEnumerator<System.IAsyncResult> Execute()
        {
            return new CodeModelTestInput.UnusedCapturedLocal.<Execute>d__3(0){
                <>4__this = this, 
            };

        }

        public System.Collections.Generic.IEnumerator<System.IAsyncResult> Execute2()
        {
            return new CodeModelTestInput.UnusedCapturedLocal.<Execute2>d__8(0){
                <>4__this = this, 
            };

        }

        public UnusedCapturedLocal()
        {
            this.object();
        }
    }

    public class ClassThatHasLambdaWithPopsInIt
    {
        public void TakeLambdaAsArg(System.Func<string, bool> f)
        {
        }

        public string CallMethodWithLambda()
        {
            string msg = "If the decompiler gets better and this lambda gets decompiled into an expression without pops, then this test is meaningless.";
            this.TakeLambdaAsArg(delegate (string s) {
                bool stack_0_System_Boolean;
                int stack_0_System_Int32;
                if (s.Contains("foo"))
                {
                    if (s.Contains("bar"))
                    else                    goto IL_0027;
                    stack_0_System_Boolean = s.Contains("baz");
                }
                else
                {
                IL_0027:
                    stack_0_System_Boolean = false;
                }
                return stack_0_System_Boolean != false;

            });
            return msg;

        }

        public ClassThatHasLambdaWithPopsInIt()
        {
            this.object();
        }
    }

    public class TwoParameterGenericType<A, B>
    {
        public TwoParameterGenericType()
        {
            this.object();
        }
    }

    public static class LambdaThatTurnsIntoGenericMethod
    {
        public static CodeModelTestInput.TwoParameterGenericType<X, Y> CreateInstanceOfTwoParameterGenericType<X, Y>(X x, Y y)
        {
            return (CodeModelTestInput.TwoParameterGenericType<X, Y>)null;

        }

        public static System.Func<U, CodeModelTestInput.TwoParameterGenericType<U, U>> MethodContainingLambdaThatTurnsIntoGenericMethod<U>()
        {
            return (U u) => CodeModelTestInput.LambdaThatTurnsIntoGenericMethod.CreateInstanceOfTwoParameterGenericType<U, U>(u, u);

        }
    }

    public class DecompilingFinallyHandlers
    {
        public static void TerminalFinallyBlock()
        {
            int i = 0;
            try
            {
                throw new System.Exception();
            }
            finally
            {
                i += 2;
            }
        }

        public DecompilingFinallyHandlers()
        {
            this.object();
        }
    }
}
